// A* Search Algorithm
1.  Initialize the open list // inisialisasi open list, yaitu daftar node yg belum dikunjungi
2.  Initialize the closed list // inisialisasi closed list, yaitu daftar node yg sudah dikunjungi
    put the starting node on the open // masukkan node start di open list dan beri nilai f pada 0
    list (you can leave its f at zero) 

3.  while the open list is not empty
    a) find the node with the least f on // pada list node yg belum dikunjungi (open list) cari list dengan nilai f terendah
       the open list, call it "q" // panggil itu "q"

    b) pop q off the open list // panggil q ke open list
  
    c) generate q's 8 successors and set their 
       parents to q // buat 8 successor dan set q sebagai parent mereka
   
    d) for each successor
        i) if successor is the goal, stop search// jika successor adalah goal, stop search
        
        ii) else, compute both g and h for successor// else hitung nilai g dan h pada successor
          successor.g = q.g + distance between // successor.g adalah jarak dari parent q ke successor
                              successor and q
          successor.h = distance from goal to // successor.h adalah jarak dari successor ke goal
          successor (This can be done using many 
          ways, we will discuss three heuristics- 
          Manhattan, Diagonal and Euclidean 
          Heuristics)
          
          successor.f = successor.g + successor.h // nilai f adalah gabungan dari perhitungan diatas

        iii) if a node with the same position as 
            successor is in the OPEN list which has a 
           lower f than successor, skip this successor // apabila ada node dengan posisi yg sama, dengan nilai f lebih rendah, pilih yang itu, abaikan successor tadi

        iV) if a node with the same position as 
            successor  is in the CLOSED list which has
            a lower f than successor, skip this successor
            otherwise, add  the node to the open list
     end (for loop) // apabila ada node dengan posisi yang sama dengan nilai f yg lebih rendah berada di closed node, pindah ke open node
  
    e) push q on the closed list
    end (while loop)// q sudah selesai dikalkulasi, masukkan ke closed loop